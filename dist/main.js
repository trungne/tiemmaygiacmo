(()=>{"use strict";var n={426:(n,r,t)=>{t.d(r,{Z:()=>p});var e=t(15),o=t.n(e),i=t(645),a=t.n(i),c=t(667),A=t.n(c),s=t(991),d=t(747),l=a()(o()),u=A()(s),f=A()(d);l.push([n.id,"@font-face {\r\n    font-family: 'Lovepen';\r\n    src: url("+u+") format('woff');\r\n    font-weight: 200;\r\n    /* font-style: normal; */\r\n}\r\n\r\n@font-face {\r\n    font-family: 'Fetridge';\r\n    src: url("+f+") format('woff');\r\n    font-weight: 200;\r\n    font-style: normal;\r\n}\r\n\r\n\r\n\r\nimg {\r\n    max-width: 100%; \r\n    max-height: 100%;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    height: 100%;\r\n    width: auto;\r\n}\r\n\r\n.header {\r\n    background-color: rgb(255, 255, 255);\r\n    width: 100vw;\r\n    height: 25vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 0;\r\n    background-color: rgb(138, 160, 138);\r\n}\r\n\r\nmain {\r\n    width: 100vw;\r\n    height: 75vh;\r\n    max-height: 75vh;\r\n    object-fit: cover;\r\n    display: flex;     \r\n    \r\n}\r\n\r\n.main-component {\r\n    width: 50%;\r\n\r\n    overflow: hidden;\r\n    \r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    font-family: \"Fetridge\";\r\n    font-size: 25vw;\r\n    letter-spacing: 1vw;\r\n\r\n    transition: font-size 300ms, letter-spacing 300ms;\r\n    \r\n}\r\n.main-component-text {\r\n    font-size: 0.3em;\r\n}\r\n.main-component:hover{\r\n    transition-timing-function: ease-in-out;\r\n    letter-spacing: 1.5vw;\r\n    font-size: 30vw;\r\n}\r\n\r\ndiv.main-component {\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-shadow: 5px 5px 1px black;\r\n    color: white;\r\n}\r\ndiv > img{\r\n    object-fit: cover;\r\n    height: 100%;\r\n    /* background-color: gray; */\r\n}\r\n\r\n#design-text {\r\n    position: absolute;\r\n    left: 25%;\r\n}\r\n\r\n#design-text > div{\r\n    position: relative; \r\n    left: -50%;\r\n}\r\n\r\n#about-us-text{\r\n    position: absolute;\r\n    right: 25%;\r\n}\r\n\r\n#about-us-text > div{\r\n    position: relative; \r\n    right: -50%;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,2DAA8C;IAC9C,gBAAgB;IAChB,wBAAwB;AAC5B;;AAEA;IACI,uBAAuB;IACvB,2DAAyC;IACzC,gBAAgB;IAChB,kBAAkB;AACtB;;;;AAIA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,SAAS;IACT,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,oCAAoC;IACpC,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,SAAS;IACT,oCAAoC;AACxC;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;;AAEjB;;AAEA;IACI,UAAU;;IAEV,gBAAgB;;IAEhB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;IAEnB,uBAAuB;IACvB,eAAe;IACf,mBAAmB;;IAEnB,iDAAiD;;AAErD;AACA;IACI,gBAAgB;AACpB;AACA;IACI,uCAAuC;IACvC,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,YAAY;IACZ,4BAA4B;AAChC;;AAEA;IACI,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf",sourcesContent:["@font-face {\r\n    font-family: 'Lovepen';\r\n    src: url(\"Lovepen_regular.otf\") format('woff');\r\n    font-weight: 200;\r\n    /* font-style: normal; */\r\n}\r\n\r\n@font-face {\r\n    font-family: 'Fetridge';\r\n    src: url('./Fetridge.otf') format('woff');\r\n    font-weight: 200;\r\n    font-style: normal;\r\n}\r\n\r\n\r\n\r\nimg {\r\n    max-width: 100%; \r\n    max-height: 100%;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    height: 100%;\r\n    width: auto;\r\n}\r\n\r\n.header {\r\n    background-color: rgb(255, 255, 255);\r\n    width: 100vw;\r\n    height: 25vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 0;\r\n    background-color: rgb(138, 160, 138);\r\n}\r\n\r\nmain {\r\n    width: 100vw;\r\n    height: 75vh;\r\n    max-height: 75vh;\r\n    object-fit: cover;\r\n    display: flex;     \r\n    \r\n}\r\n\r\n.main-component {\r\n    width: 50%;\r\n\r\n    overflow: hidden;\r\n    \r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    font-family: \"Fetridge\";\r\n    font-size: 25vw;\r\n    letter-spacing: 1vw;\r\n\r\n    transition: font-size 300ms, letter-spacing 300ms;\r\n    \r\n}\r\n.main-component-text {\r\n    font-size: 0.3em;\r\n}\r\n.main-component:hover{\r\n    transition-timing-function: ease-in-out;\r\n    letter-spacing: 1.5vw;\r\n    font-size: 30vw;\r\n}\r\n\r\ndiv.main-component {\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-shadow: 5px 5px 1px black;\r\n    color: white;\r\n}\r\ndiv > img{\r\n    object-fit: cover;\r\n    height: 100%;\r\n    /* background-color: gray; */\r\n}\r\n\r\n#design-text {\r\n    position: absolute;\r\n    left: 25%;\r\n}\r\n\r\n#design-text > div{\r\n    position: relative; \r\n    left: -50%;\r\n}\r\n\r\n#about-us-text{\r\n    position: absolute;\r\n    right: 25%;\r\n}\r\n\r\n#about-us-text > div{\r\n    position: relative; \r\n    right: -50%;\r\n}"],sourceRoot:""}]);const p=l},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t=n(r);return r[2]?"@media ".concat(r[2]," {").concat(t,"}"):t})).join("")},r.i=function(n,t,e){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(e)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);e&&o[A[0]]||(t&&(A[2]?A[2]="".concat(t," and ").concat(A[2]):A[2]=t),r.push(A))}},r}},15:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var t=0,e=new Array(r);t<r;t++)e[t]=n[t];return e}n.exports=function(n){var t,e,o=(e=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,r){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var e,o,i=[],a=!0,c=!1;try{for(t=t.call(n);!(a=(e=t.next()).done)&&(i.push(e.value),!r||i.length!==r);a=!0);}catch(n){c=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(c)throw o}}return i}}(t,e)||function(n,t){if(n){if("string"==typeof n)return r(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(n,t):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(A," */"),d=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(d).concat([s]).join("\n")}return[i].join("\n")}},667:n=>{n.exports=function(n,r){return r||(r={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},695:n=>{var r={};n.exports=function(n){if(void 0===r[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[n]=t}return r[n]}},379:n=>{var r=[];function t(n){for(var t=-1,e=0;e<r.length;e++)if(r[e].identifier===n){t=e;break}return t}function e(n,e){for(var i={},a=[],c=0;c<n.length;c++){var A=n[c],s=e.base?A[0]+e.base:A[0],d=i[s]||0,l="".concat(s," ").concat(d);i[s]=d+1;var u=t(l),f={css:A[1],media:A[2],sourceMap:A[3]};-1!==u?(r[u].references++,r[u].updater(f)):r.push({identifier:l,updater:o(f,e),references:1}),a.push(l)}return a}function o(n,r){var t=r.domAPI(r);return t.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t.update(n=r)}else t.remove()}}n.exports=function(n,o){var i=e(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);r[c].references--}for(var A=e(n,o),s=0;s<i.length;s++){var d=t(i[s]);0===r[d].references&&(r[d].updater(),r.splice(d,1))}i=A}}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r),r}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(t){!function(n,r,t){var e=t.css,o=t.media,i=t.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(e,n)}(r,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},813:(n,r,t)=>{n.exports=t.p+"881ae1c7ca3cb1b53164.jpg"},298:(n,r,t)=>{n.exports=t.p+"00dccf7178739436d120.jpg"},747:(n,r,t)=>{n.exports=t.p+"6edb8cee127d02a5c383.otf"},991:(n,r,t)=>{n.exports=t.p+"dbda7faa65d3ba4f6ccf.otf"},440:(n,r,t)=>{n.exports=t.p+"1df9a4f89adb3da4669a.png"}},r={};function t(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,t),i.exports}t.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return t.d(r,{a:r}),r},t.d=(n,r)=>{for(var e in r)t.o(r,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var r=t.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var e=r.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{var n=t(379),r=t.n(n),e=t(795),o=t.n(e),i=t(695),a=t.n(i),c=t(216),A=t.n(c),s=t(426),d={styleTagTransform:function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}},setAttributes:function(n){var r=t.nc;r&&n.setAttribute("nonce",r)},insert:function(n){var r=a()("head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}};d.domAPI=o(),d.insertStyleElement=A(),r()(s.Z,d),s.Z&&s.Z.locals&&s.Z.locals;var l=t(440),u=t(813),f=t(298);document.body.appendChild(function(){const n=document.createElement("div");n.classList.add("header");const r=new Image;return r.src=l,n.appendChild(r),n}()),document.body.appendChild(function(){const n=document.createElement("main"),r=document.createElement("div");r.id="design",r.classList.add("main-component"),r.appendChild(function(n,r,t){const e=document.createElement("div");for(let r=0;r<n.length;r++){let t=document.createElement("div");t.textContent=n[r],e.appendChild(t)}return e.classList.add(r),e.id=t,e}(["Thiết Kế","Giấc Mơ"],"main-component-text","design-text"));const t=document.createElement("div");t.id="design-img";const e=new Image;e.src=u,t.appendChild(e),r.appendChild(t);const o=document.createElement("div");o.id="about-us",o.classList.add("main-component"),o.appendChild(function(n,r,t){const e=document.createElement("div"),o=document.createElement("div");return o.textContent="Về Tụi Mình",e.appendChild(o),e.classList.add(r),e.id=t,e}(0,"main-component-text","about-us-text"));const i=document.createElement("div");i.id="about-us-img";const a=new Image;return a.src=f,i.appendChild(a),o.appendChild(i),n.appendChild(r),n.appendChild(o),n}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,