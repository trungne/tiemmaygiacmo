(()=>{"use strict";var n={426:(n,t,r)=>{r.d(t,{Z:()=>p});var e=r(15),o=r.n(e),i=r(645),a=r.n(i),c=r(667),s=r.n(c),A=r(991),u=r(747),l=a()(o()),d=s()(A),f=s()(u);l.push([n.id,"@font-face {\r\n    font-family: 'Lovepen';\r\n    src: url("+d+") format('woff');\r\n    font-weight: 200;\r\n    /* font-style: normal; */\r\n}\r\n\r\n@font-face {\r\n    font-family: 'Fetridge';\r\n    src: url("+f+") format('woff');\r\n    font-weight: 200;\r\n    font-style: normal;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    height: 100%;\r\n    width: auto;\r\n}\r\n\r\nmain {\r\n    display: flex;     \r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\nimg {\r\n    max-width: 100%; \r\n    max-height: 100%;\r\n}\r\n\r\n.header {\r\n    background-color: rgb(255, 255, 255);\r\n    height: 250px; \r\n    display: flex; \r\n    justify-content: center;\r\n}\r\n\r\n.main-component {\r\n    width: 50%;\r\n    height: auto;\r\n    object-fit:fill;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n\r\n    font-family: \"Fetridge\";\r\n    font-size: 4vw;\r\n    letter-spacing: 1vw;\r\n\r\n    transition: font-size 300ms, letter-spacing 300ms;\r\n    \r\n}\r\n\r\n.main-component:hover{\r\n    transition-timing-function: ease-in-out;\r\n    letter-spacing: 1.5vw;\r\n    font-size: 4.5vw;\r\n}\r\n\r\ndiv.main-component {\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-shadow: 5px 5px 1px black;\r\n    color: white;\r\n}\r\n\r\n#design-text {\r\n    position: absolute;\r\n    left: 25%;\r\n}\r\n\r\n#design-text > div{\r\n    position: relative; \r\n    left: -50%;\r\n}\r\n\r\n#about-us-text{\r\n    position: absolute;\r\n    right: 25%;\r\n}\r\n\r\n#about-us-text > div{\r\n    position: relative; \r\n    right: -50%;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,2DAA8C;IAC9C,gBAAgB;IAChB,wBAAwB;AAC5B;;AAEA;IACI,uBAAuB;IACvB,2DAAyC;IACzC,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,SAAS;IACT,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,oCAAoC;IACpC,aAAa;IACb,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,eAAe;;IAEf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;;IAGnB,uBAAuB;IACvB,cAAc;IACd,mBAAmB;;IAEnB,iDAAiD;;AAErD;;AAEA;IACI,uCAAuC;IACvC,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,WAAW;AACf",sourcesContent:["@font-face {\r\n    font-family: 'Lovepen';\r\n    src: url(\"Lovepen_regular.otf\") format('woff');\r\n    font-weight: 200;\r\n    /* font-style: normal; */\r\n}\r\n\r\n@font-face {\r\n    font-family: 'Fetridge';\r\n    src: url('./Fetridge.otf') format('woff');\r\n    font-weight: 200;\r\n    font-style: normal;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    height: 100%;\r\n    width: auto;\r\n}\r\n\r\nmain {\r\n    display: flex;     \r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\nimg {\r\n    max-width: 100%; \r\n    max-height: 100%;\r\n}\r\n\r\n.header {\r\n    background-color: rgb(255, 255, 255);\r\n    height: 250px; \r\n    display: flex; \r\n    justify-content: center;\r\n}\r\n\r\n.main-component {\r\n    width: 50%;\r\n    height: auto;\r\n    object-fit:fill;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n\r\n    font-family: \"Fetridge\";\r\n    font-size: 4vw;\r\n    letter-spacing: 1vw;\r\n\r\n    transition: font-size 300ms, letter-spacing 300ms;\r\n    \r\n}\r\n\r\n.main-component:hover{\r\n    transition-timing-function: ease-in-out;\r\n    letter-spacing: 1.5vw;\r\n    font-size: 4.5vw;\r\n}\r\n\r\ndiv.main-component {\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-shadow: 5px 5px 1px black;\r\n    color: white;\r\n}\r\n\r\n#design-text {\r\n    position: absolute;\r\n    left: 25%;\r\n}\r\n\r\n#design-text > div{\r\n    position: relative; \r\n    left: -50%;\r\n}\r\n\r\n#about-us-text{\r\n    position: absolute;\r\n    right: 25%;\r\n}\r\n\r\n#about-us-text > div{\r\n    position: relative; \r\n    right: -50%;\r\n}"],sourceRoot:""}]);const p=l},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var r=n(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(n,r,e){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(e)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);e&&o[s[0]]||(r&&(s[2]?s[2]="".concat(r," and ").concat(s[2]):s[2]=r),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var r=0,e=new Array(t);r<t;r++)e[r]=n[r];return e}n.exports=function(n){var r,e,o=(e=4,function(n){if(Array.isArray(n))return n}(r=n)||function(n,t){var r=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=r){var e,o,i=[],a=!0,c=!1;try{for(r=r.call(n);!(a=(e=r.next()).done)&&(i.push(e.value),!t||i.length!==t);a=!0);}catch(n){c=!0,o=n}finally{try{a||null==r.return||r.return()}finally{if(c)throw o}}return i}}(r,e)||function(n,r){if(n){if("string"==typeof n)return t(n,r);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?t(n,r):void 0}}(r,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),A="/*# ".concat(s," */"),u=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(u).concat([A]).join("\n")}return[i].join("\n")}},667:n=>{n.exports=function(n,t){return t||(t={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},695:n=>{var t={};n.exports=function(n){if(void 0===t[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}t[n]=r}return t[n]}},379:n=>{var t=[];function r(n){for(var r=-1,e=0;e<t.length;e++)if(t[e].identifier===n){r=e;break}return r}function e(n,e){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],A=e.base?s[0]+e.base:s[0],u=i[A]||0,l="".concat(A," ").concat(u);i[A]=u+1;var d=r(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(t[d].references++,t[d].updater(f)):t.push({identifier:l,updater:o(f,e),references:1}),a.push(l)}return a}function o(n,t){var r=t.domAPI(t);return r.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r.update(n=t)}else r.remove()}}n.exports=function(n,o){var i=e(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=r(i[a]);t[c].references--}for(var s=e(n,o),A=0;A<i.length;A++){var u=r(i[A]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(r){!function(n,t,r){var e=r.css,o=r.media,i=r.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(e,n)}(t,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},813:(n,t,r)=>{n.exports=r.p+"881ae1c7ca3cb1b53164.jpg"},298:(n,t,r)=>{n.exports=r.p+"00dccf7178739436d120.jpg"},747:(n,t,r)=>{n.exports=r.p+"6edb8cee127d02a5c383.otf"},991:(n,t,r)=>{n.exports=r.p+"dbda7faa65d3ba4f6ccf.otf"},440:(n,t,r)=>{n.exports=r.p+"1df9a4f89adb3da4669a.png"}},t={};function r(e){var o=t[e];if(void 0!==o)return o.exports;var i=t[e]={id:e,exports:{}};return n[e](i,i.exports,r),i.exports}r.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return r.d(t,{a:t}),t},r.d=(n,t)=>{for(var e in t)r.o(t,e)&&!r.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),r.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;r.g.importScripts&&(n=r.g.location+"");var t=r.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=n})(),(()=>{var n=r(379),t=r.n(n),e=r(795),o=r.n(e),i=r(695),a=r.n(i),c=r(216),s=r.n(c),A=r(426),u={styleTagTransform:function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}},setAttributes:function(n){var t=r.nc;t&&n.setAttribute("nonce",t)},insert:function(n){var t=a()("head");if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}};u.domAPI=o(),u.insertStyleElement=s(),t()(A.Z,u),A.Z&&A.Z.locals&&A.Z.locals;var l=r(440),d=r(813),f=r(298);function p(n,t,r){const e=document.createElement("div"),o=document.createElement("div");return o.textContent=n,e.appendChild(o),t&&e.classList.add(t),r&&(e.id=r),e}document.body.appendChild(function(){const n=document.createElement("div");n.classList.add("header");const t=new Image;return t.src=l,n.appendChild(t),n}()),document.body.appendChild(function(){const n=document.createElement("main"),t=document.createElement("div");t.id="design",t.classList.add("main-component"),t.appendChild(p("Thiết Kế Giấc Mơ","main-component-text","design-text"));const r=document.createElement("div");r.id="design-img";const e=new Image;e.src=d,r.appendChild(e),t.appendChild(r);const o=document.createElement("div");o.id="about-us",o.classList.add("main-component"),o.appendChild(p("Về Tụi Mình","main-component-text","about-us-text"));const i=document.createElement("div");i.id="about-us-img";const a=new Image;return a.src=f,i.appendChild(a),o.appendChild(i),n.appendChild(t),n.appendChild(o),n}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,